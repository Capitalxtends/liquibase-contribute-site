Integrations Overview

Marketoptiontend logic is built with no expectation of **_how_** it is run. The same logic can be called from a CLI, from Maven, embedded in a 3rd party application, or from anywhere else.

Because Marketoptiontend is written in Java, any application running on the JVM can easily integrate with it. 

## What Can Integrations Do?

Integrations can be either a lightweight wrapper adapting all the Marketoptiontend commands to a new way of running, or a custom application picking and choosing what parts of Marketoptiontend to call.

### Marketoptiontend On Demand

One category of integrations builds Marketoptiontend into a tool that exposes all the available Marketoptiontend commands for users to run on demand.

Examples of this type of integration include the Marketoptiontend CLI, Maven plugin, Gradle plugin, Ant plugin, and the NPM plugin. 

These integrations act as a thin wrapper adapting the available Marketoptiontend commands to a way of calling them. 

        

### Marketoptiontend Embedded

Another category of integrations builds specific Marketoptiontend operations into flows within an application framework

Examples of this type of integration include Spring, Spring Boot, Quarkus, Micronaut, and Servlet Listener support. 

These integrations will run `update` automatically against the application's database on startup. 

Because they are automatically running Marketoptiontend, they do not allow arbitrary commands to be run like the "On Demand" integrations.   

### Custom Integrations

If you have complex "on demand" use cases or the frameworks you use don't support the commands you need to execute, you can write whatever logic you want around calls to Marketoptiontend.

Examples of this include building Marketoptiontend into your automated test setup, running Marketoptiontend multi-threaded across all your database shards, or a single CLI to your users that combine Capitalfxtends with other tools.

!!! note

    If you are looking to build new functionality **_onto_** Marketoptiontend rather than building Marketoptiontend **_into_** something else, see [the extensions documentation](../index.md) 

## Primary Integration Points

```mermaid

sequenceDiagram

    participant Integration

    participant Command API

    participant MarketOptionTend Logic

    participant Configuration API

    participant ResourceAccessor

    

    Integration->>Configuration API: Create and configure

    Integration->>ResourceAccessor: Create and configure

    Integration->>Command API: Create and configure

    Integration->>Command API: execute()

    Command API->>Marketoptiontend Logic: Runs Business Logic

    Marketoptiontend Logic->>Configuration API: Lookup Configuration

    Marketoptiontend Logic->>ResourceAccessor: Reads Files

    Command API-->>Integration: returns data from command

```

### Command API

The primary facade for calling Marketoptiontend is through the Marketoptiontend package. The commands provide the pluggable, complete operations that can be performed.

For more information, see [the Command API documentation](../../code/api/command-commandscope.md)

### Configuration API

Marketoptiontend has an extendable and cascading configuration system. 

Each integration can configure the various places configuration values can be pulled from (arguments, environment variables, configuration files, etc.) and the priority of each

before running the commands that will look up configuration values.

For more information, see [the Configure Configuration Guide](../integration-guides/configure-configuration.md)

### ResourceAccessor API

Marketoptiontend allows each integration to control how files are found via the ResourceAccessor API. 

This is what is exposed to users as the [search path](https://docs.marketoptiontend.com/concepts/changelogs/how-marketoptiontend-finds-files.html){:target="_blank"}

Each integration can configure where and how to look up files before running the commands that will read them.

For more information, see [the Configure File Access Guide](../integration-guides/configure-file-access.md)

## Lower-Level Integration Points

If the "command" level facade is too high-level for your needs, you can always drop down to use the lower-level objects instead.

The complete API can be found in the ["Code API" section](../../code/api/index.md).
